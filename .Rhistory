x1 <- data[,1]
x2 <- data[,2]
plot(x1,x2)
data <- mvrnorm(200,c(500,1000),matrix(c(1,0.9,0.9,1),nrow = 2))
x1 <- data[,1]
x2 <- data[,2]
plot(x1,x2)
data <- mvrnorm(200,c(500,1000),matrix(c(1,0.95,0.95,1),nrow = 2))
x1 <- data[,1]
x2 <- data[,2]
plot(x1,x2)
data <- mvrnorm(200,c(500,1000),matrix(c(1,0.95,0.95,1),nrow = 2))
x1 <- data[,1]
x2 <- data[,2]
plot(x1,x2)
cor(x1,x2)
library(ISLR)
data <- Default
data['student'] = apply(data['student'], 1, function(x) {if(x=="No") return(0) else return(1)})
data['default'] = apply(data['default'], 1, function(x) {if(x=="No") return(0) else return(1)})
data
train_ind = sample.int(nrow(data),size = 0.75*nrow(data))
set.seed(123)
train <- data[train_ind,]
test <- data[-train_ind,]
max_bal <- max(train['balance'])
min_bal <- min(train['balance'])
max_inc <- max(train['income'])
min_inc <- min(train['income'])
train['balance'] <- apply(train['balance'],1,function(x) return((x-min_bal)/(max_bal-min_bal)))
train['income'] <- apply(train['income'],1,function(x) return((x-min_inc)/(max_inc-min_inc)))
x_train <- train[,-1]
y_train <- train[,1]
x_test <- test[,-1]
y_test <- test[,1]
logisticReg <- function(X,Y,lr=1,threshold=0.1){
params <- rep(0,ncol(x_train)+1)
prev_loss <- 0.0
diff <- Inf
while(diff>threshold){
curr_loss <- 0.0
diff <- 0
for(row in 1:nrow(X)){
x<-as.numeric(c(list(1),X[row,]))
pred <- as.double(1/as.double(1+exp(-(x%*%params))))
loss <- Y[row] - pred
curr_loss <- curr_loss + (loss^2)
for(p in 1:length(params))
params[p] <- params[p] + lr*x[p]*loss
}
curr_loss <- sqrt(curr_loss)
diff <- abs(curr_loss-prev_loss)
prev_loss <- curr_loss
print(curr_loss)
}
return(params)
}
params <- logisticReg(x_train,y_train)
getPred<-function(x){
x<-as.numeric(c(list(1),x))
return(1/(1+exp(-(x%*%params))))
}
getClass <- function(x){
if(x>=0.5)
return(1)
return(0)
}
train_ind = sample.int(nrow(data),size = 0.75*nrow(data))
set.seed(123)
train <- data[train_ind,]
test <- data[-train_ind,]
max_bal <- max(train['balance'])
min_bal <- min(train['balance'])
max_inc <- max(train['income'])
min_inc <- min(train['income'])
train['balance'] <- apply(train['balance'],1,function(x) return((x-min_bal)/(max_bal-min_bal)))
train['income'] <- apply(train['income'],1,function(x) return((x-min_inc)/(max_inc-min_inc)))
x_train <- train[,-1]
y_train <- train[,1]
test['balance'] <- apply(test['balance'],1,function(x) return((x-min_bal)/(max_bal-min_bal)))
test['income'] <- apply(test['income'],1,function(x) return((x-min_inc)/(max_inc-min_inc)))
x_test <- test[,-1]
y_test <- test[,1]
getPred<-function(x){
x<-as.numeric(c(list(1),x))
return(1/(1+exp(-(x%*%params))))
}
getClass <- function(x){
if(x>=0.5)
return(1)
return(0)
}
model <- glm(default ~ student + balance + income, data = train, family = binomial)
#Print RSE
sqrt(sum((y_train-predict(model,x_train,type='response'))^2))
sqrt(sum((y_train - apply(x_train,1,getPred))^2))
pred <- sapply(apply(x_test,1,getPred),getClass)
predLib <- sapply(predict(model,x_test,type='response'),getClass)
print("Confusion Matrix for Custom LR")
table(pred,y_test)
print("Confusion Matrix for LR using Library Function")
table(predLib,y_test)
logisticReg <- function(X,Y,lr=1,threshold=0.1){
params <- rep(0,ncol(x_train)+1)
prev_loss <- 0.0
diff <- Inf
while(diff>threshold){
curr_loss <- 0.0
diff <- 0
for(row in 1:nrow(X)){
x<-as.numeric(c(list(1),X[row,]))
pred <- as.double(1/as.double(1+exp(-(x%*%params))))
loss <- Y[row] - pred
curr_loss <- curr_loss + (loss^2)
for(p in 1:length(params))
params[p] <- params[p] + lr*x[p]*loss
}
curr_loss <- sqrt(curr_loss)
diff <- abs(curr_loss-prev_loss)
prev_loss <- curr_loss
print(curr_loss)
}
return(params)
}
params <- logisticReg(x_train,y_train)
#Print RSE
sqrt(sum((y_train-predict(model,x_train,type='response'))^2))
sqrt(sum((y_train - apply(x_train,1,getPred))^2))
pred <- sapply(apply(x_test,1,getPred),getClass)
predLib <- sapply(predict(model,x_test,type='response'),getClass)
print("Confusion Matrix for Custom LR")
table(pred,y_test)
print("Confusion Matrix for LR using Library Function")
table(predLib,y_test)
logisticReg <- function(X,Y,lr=1,threshold=0.001){
params <- rep(0,ncol(x_train)+1)
prev_loss <- 0.0
diff <- Inf
while(diff>threshold){
curr_loss <- 0.0
diff <- 0
for(row in 1:nrow(X)){
x<-as.numeric(c(list(1),X[row,]))
pred <- as.double(1/as.double(1+exp(-(x%*%params))))
loss <- Y[row] - pred
curr_loss <- curr_loss + (loss^2)
for(p in 1:length(params))
params[p] <- params[p] + lr*x[p]*loss
}
curr_loss <- sqrt(curr_loss)
diff <- abs(curr_loss-prev_loss)
prev_loss <- curr_loss
print(curr_loss)
}
return(params)
}
params <- logisticReg(x_train,y_train)
getPred<-function(x){
x<-as.numeric(c(list(1),x))
return(1/(1+exp(-(x%*%params))))
}
getClass <- function(x){
if(x>=0.5)
return(1)
return(0)
}
#Print RSE
sqrt(sum((y_train-predict(model,x_train,type='response'))^2))
sqrt(sum((y_train - apply(x_train,1,getPred))^2))
pred <- sapply(apply(x_test,1,getPred),getClass)
predLib <- sapply(predict(model,x_test,type='response'),getClass)
print("Confusion Matrix for Custom LR")
table(pred,y_test)
print("Confusion Matrix for LR using Library Function")
table(predLib,y_test)
help(runif)
runif(10,1,10)
help(samplw)
help(sample)
sample(c(1,2,34,4),4)
as.list(sample(c(1,2,34,4),4))
d <- data.frame("col1"=c(1,2,3,4),"col2"=c(5,6,7,9))
sample(d,nrow(d))
d[sample.int(nrow(d)),]
help("grep")
gsub("[\\s+]"," ","Testing pls   hello    ")
gsub("\\s+"," ","Testing pls   hello    ")
gsub("*\\s","","Testing pls   hello    ")
gsub("*\\s"," ","Testing pls   hello    ")
gsub("*\\s$","","Testing pls   hello    ")
gsub("*\\s*$","","Testing pls   hello    ")
gsub("*\\s*$","","    Testing pls   hello    ")
gsub("^\\s*","","    Testing pls   hello    ")
gsub("^\\s*","","    Testing pls   hello    ")
gsub("(^\\s*)(\\s*$","","    Testing pls   hello    ")
gsub("(^\\s*)(\\s*$)","","    Testing pls   hello    ")
gsub("(^\\s*)|(\\s*$)","","    Testing pls   hello    ")
c(1,2,3,4,5)<3
which(c(1,2,3,4,5)<3)
c(1,2,3,4)-5
data <- read.csv('sales.csv',header=TRUE,sep=',')
x <- data$budget
y <- data$totalUnits
mean_x <- sum(x)/nrow(data)
mean_y <- sum(y)/nrow(data)
b_1 <- sum(sapply(x,function(x) return(x-mean_x))*sapply(y,function(y) return(y-mean_y)))/sum(sapply(x,function(x) return((x-mean_x)^2)))
b_1 <- sum((x-mean_x)*(y-mean_y))/sum((x-mean_x)^2)
b_0 <- mean_y - b_1*mean_x
getPred<-function(x){
return (b_0 + (b_1*x))
}
x_test<-c(3000,4000,5000,6000,7000)
predicted<-sapply(x_test,getPred)
predicted
par(mfrow=c(1,2))    # set the plotting area into a 1*2 array
plot(x_test,predicted)
##Library Function
linearMod<-lm(totalUnits~budget,data=data)
print(linearMod)
modelSummary<-summary(linearMod)
modelCoeffs<-modelSummary$coefficients
modelCoeffs
x_test_lib = data.frame(budget=c(3000,4000,5000,6000,7000))
predictions_lib<-predict(linearMod,x_test_lib)
plot(x_test,predictions_lib)
c(1,2,3,4)*2
linearMod$coefficients
modelSummary$coefficients
data <- read.csv('salesmlr.csv')
data[,c('media','budgetNews')]
data[,c('media','budgetNews')][,1]
data[,c('budgetNews','media')][,1]
read.csv
distance=vector()
age<-x[1]
loan<-x[2]
length(distance)=nrow(table)
for(i in 1:nrow(table))
{
distance[i]=sqrt(((age-table[i,1])^2)+((loan-table[i,2])^2))
}
temp_table <- table
temp_table$dist <- distance
temp_table <- temp_table[order(temp_table$dist),]
k_nb <- temp_table[1:k,3]
count_table <- table(k_nb)
classes <- names(count_table)
x <- c(5,5)
k <- 3
distance=vector()
age<-x[1]
loan<-x[2]
length(distance)=nrow(table)
for(i in 1:nrow(table))
{
distance[i]=sqrt(((age-table[i,1])^2)+((loan-table[i,2])^2))
}
temp_table <- table
temp_table$dist <- distance
temp_table <- temp_table[order(temp_table$dist),]
k_nb <- temp_table[1:k,3]
count_table <- table(k_nb)
classes <- names(count_table)
table <- read.csv('ageloans.csv',header=TRUE,sep=',')
table
getPred<-function(x,k){
distance=vector()
age<-x[1]
loan<-x[2]
length(distance)=nrow(table)
for(i in 1:nrow(table))
{
distance[i]=sqrt(((age-table[i,1])^2)+((loan-table[i,2])^2))
}
temp_table <- table
temp_table$dist <- distance
temp_table <- temp_table[order(temp_table$dist),]
k_nb <- temp_table[1:k,3]
count_table <- table(k_nb)
classes <- names(count_table)
return(classes[which.max(count_table)])
}
x_test <- data.frame("Age"=c(5,20,80),"Loan"=c(5,10000,300000))
pred1 <- apply(x_test,1,function(x) getPred(x,1))
pred2 <- apply(x_test,1,function(x) getPred(x,2))
pred3 <- apply(x_test,1,function(x) getPred(x,3))
distance=vector()
age<-x[1]
loan<-x[2]
length(distance)=nrow(table)
for(i in 1:nrow(table))
{
distance[i]=sqrt(((age-table[i,1])^2)+((loan-table[i,2])^2))
}
temp_table <- table
temp_table$dist <- distance
temp_table <- temp_table[order(temp_table$dist),]
k_nb <- temp_table[1:k,3]
count_table <- table(k_nb)
classes <- names(count_table)
count_table
table(temp_table,temp_table)
table(k_nb,k_nb)
table(table)
table(table[1:3])
names(table(k_nb,k_nb))
names(table(k_nb)
)
help(names)
table(k_nb)
names(table)
table[,'Age']
for i in names(table){}
for i in names(table){
print(table[,i])
}
for(i in names(table)){
print(table,i)
}
for (i in names(table)){
print(table[,i])
}
for (i in names(table)){
print(table[i])
}
for (i in names(table)){
print(table[[i]])
}
table[,i]
table[,1:@]
table[,1:2]
library(ISLR)
data <- Default
data['student'] = apply(data['student'], 1, function(x) {if(x=="No") return(0) else return(1)})
data['default'] = apply(data['default'], 1, function(x) {if(x=="No") return(0) else return(1)})
data
train_ind = sample.int(nrow(data),size = 0.75*nrow(data))
set.seed(123)
train <- data[train_ind,]
test <- data[-train_ind,]
max_bal <- max(train['balance'])
min_bal <- min(train['balance'])
max_inc <- max(train['income'])
min_inc <- min(train['income'])
train$balance - min_bal
(train$balance - min_bal)/(max_bal-min_bal)
(train$balance - min_bal)/(max_bal-min_bal)==apply(train['balance'],1,function(x) return((x-min_bal)/(max_bal-min_bal)))
train_ind = sample.int(nrow(data),size = 0.75*nrow(data))
set.seed(123)
train <- data[train_ind,]
test <- data[-train_ind,]
max_bal <- max(train['balance'])
min_bal <- min(train['balance'])
max_inc <- max(train['income'])
min_inc <- min(train['income'])
train$balance <- (train$balance-min_bal)/(max_bal-min_bal)
train$income <- (train$income-min_inc)/(max_inc-min_inc)
x_train <- train[,-1]
y_train <- train[,1]
test$balance <- (test$balance-min_bal)/(max_bal-min_bal)
test$income <- (test$income-min_inc)/(max_inc-min_inc)
x_test <- test[,-1]
y_test <- test[,1]
logisticReg <- function(X,Y,lr=1,threshold=0.001){
params <- rep(0,ncol(x_train)+1)
prev_loss <- 0.0
diff <- Inf
while(diff>threshold){
curr_loss <- 0.0
diff <- 0
for(row in 1:nrow(X)){
x<-as.numeric(c(list(1),X[row,]))
pred <- as.double(1/as.double(1+exp(-(x%*%params))))
loss <- Y[row] - pred
curr_loss <- curr_loss + (loss^2)
for(p in 1:length(params))
params[p] <- params[p] + lr*x[p]*loss
}
curr_loss <- sqrt(curr_loss)
diff <- abs(curr_loss-prev_loss)
prev_loss <- curr_loss
print(curr_loss)
}
return(params)
}
params <- logisticReg(x_train,y_train)
getPred<-function(x){
x<-as.numeric(c(list(1),x))
return(1/(1+exp(-(x%*%params))))
}
getClass <- function(x){
if(x>=0.5)
return(1)
return(0)
}
model <- glm(default ~ student + balance + income, data = train, family = binomial)
#Print RSE
sqrt(sum((y_train-predict(model,x_train,type='response'))^2))
sqrt(sum((y_train - apply(x_train,1,getPred))^2))
pred <- sapply(apply(x_test,1,getPred),getClass)
predLib <- sapply(predict(model,x_test,type='response'),getClass)
print("Confusion Matrix for Custom LR")
table(pred,y_test)
print("Confusion Matrix for LR using Library Function")
table(predLib,y_test)
summary(model)
x%*%params
x <- data[1,]
x%*%params
x <- as.numeric(x)
x%*%params
params%*%x
logisticReg <- function(X,Y,lr=1,threshold=0.001){
params <- rep(0,ncol(x_train)+1)
prev_loss <- 0.0
diff <- Inf
while(diff>threshold){
curr_loss <- 0.0
diff <- 0
for(row in 1:nrow(X)){
x<-as.numeric(c(1,X[row,]))
pred <- as.double(1/as.double(1+exp(-(x%*%params))))
loss <- Y[row] - pred
curr_loss <- curr_loss + (loss^2)
for(p in 1:length(params))
params[p] <- params[p] + lr*x[p]*loss
}
curr_loss <- sqrt(curr_loss)
diff <- abs(curr_loss-prev_loss)
prev_loss <- curr_loss
print(curr_loss)
}
return(params)
}
params <- logisticReg(x_train,y_train)
getPred<-function(x){
x<-as.numeric(c(1,x))
return(1/(1+exp(-(x%*%params))))
}
getClass <- function(x){
if(x>=0.5)
return(1)
return(0)
}
model <- glm(default ~ student + balance + income, data = train, family = binomial)
#Print RSE
sqrt(sum((y_train-predict(model,x_train,type='response'))^2))
sqrt(sum((y_train - apply(x_train,1,getPred))^2))
print("Confusion Matrix for Custom LR")
table(pred,y_test)
print("Confusion Matrix for LR using Library Function")
table(predLib,y_test)
help("glm")
student <- read.table('student-marks.csv', header=TRUE, sep=',')
student
#Pie Chart and Bar Plot
for (row in 1:nrow(student)){
x <- as.numeric(student[row,-(1:3)])
labels <- colnames(student)[-(1:3)]
main_title <- paste (student[row, "Name"], "share of marks subject wise", sep=" ")
pie(x,labels, main=main_title)
main_title <- paste (student[row, "Name"], "marks subject wise", sep=" ")
barplot(x, names.arg = labels , main = main_title)
}
#Box plot
subjects <- colnames(student)[-(1:3)]
boxplot(student[subjects],main="Student Marks Boxplot")
#Gender Split
females <- student[student$Gender=="F",]
males <- student[student$Gender=="M",]
# females
# males
#Pie Chart and Bar Plot
subjects <- c("Physics","Maths","Chemistry","FOC","CAD")
gender_labels <- c("Male","Female")
for(s in subjects){
female_avg <- mean(females[[s]])
male_avg <- mean(males[[s]])
grades <- c(male_avg,female_avg)
pie(grades,gender_labels,main = paste(s,"Marks Share"))
barplot(grades,names.arg = gender_labels, main = s)
}
#Box Plot
boxplot(females[subjects],main="Female Students' Performance Boxplot")
boxplot(males[subjects],main="Males Students' Performance Boxplot")
library(ISLR) #credit card dataset
library(MASS)
dfr = Default
index = sample(x = 1:nrow(dfr), size = round(nrow(dfr) * 0.5))
train_dfr = dfr[index, ]
test_dfr = dfr[-index, ]
model = lda(default ~ student + balance + income, data = train_dfr)
summary(model)
pred = predict(model, test_dfr)
test_dfr$pred = pred$class
head(test_dfr)
table(test_dfr$pred, test_dfr$default)
head(dfr)
library(ISLR)  #credit card - banking dataset
library(MASS)
dfr = Default
dfr$student = as.numeric(dfr$student)
dfr$student = as.factor(dfr$student)
index = sample(1:nrow(dfr), round(nrow(dfr) * 0.5))
train_dfr = dfr[index, ]
test_dfr = dfr[-index, ]
model = qda(default ~ student + balance + income, train_dfr)
summary(model)
pred = predict(model, test_dfr)
test_dfr$pred = pred$class
head(test_dfr)
table(test_dfr$pred, test_dfr$default)
